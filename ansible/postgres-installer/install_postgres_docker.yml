---
- name: Install and Manage PostgreSQL in a Docker Container
  hosts: servers
  become: yes
  vars_files:
    - vars/secrets.yml
  vars:
    postgres_data_path: "/opt/postgres-data" # Pasta no host para persistir os dados
    app_network_name: "app_network" # Nome padronizado da rede compartilhada

  tasks:
    - name: 1. Create a persistent data directory on the host machine
      file:
        path: "{{ postgres_data_path }}"
        state: directory
        mode: '0755'

    - name: 2. Ensure the shared application network exists
      community.docker.docker_network:
        name: "{{ app_network_name }}"
        state: present

    - name: 3. Deploy the PostgreSQL container
      community.docker.docker_container:
        name: postgres-db
        image: "postgres:16" # Recomendo usar uma versão específica
        restart_policy: unless-stopped
        ports:
          - "5432:5432"
        volumes:
          - "{{ postgres_data_path }}:/var/lib/postgresql/data"
        env:
          POSTGRES_PASSWORD: "{{ postgres_root_password }}"
        networks:
          - name: "{{ app_network_name }}"

    - name: 4. Wait for PostgreSQL to be ready for connections
      wait_for:
        port: 5432
        delay: 10 # Espera 10s antes de checar
        timeout: 60 # Espera até 60s no total

    - name: 5. Create application databases
      community.postgresql.postgresql_db:
        name: "{{ item.name }}"
        login_host: "localhost"
        login_user: postgres
        login_password: "{{ postgres_root_password }}"
      loop: "{{ postgres_databases }}"
      no_log: true

    - name: 6. Create application users
      community.postgresql.postgresql_user:
        name: "{{ item.user }}"
        password: "{{ item.pass }}"
        login_host: "localhost"
        login_user: postgres
        login_password: "{{ postgres_root_password }}"
      loop: "{{ postgres_databases }}"
      no_log: true

    - name: 7. Grant privileges to application users
      community.postgresql.postgresql_privs:
        db: "{{ item.name }}"
        privs: ALL
        type: database
        roles: "{{ item.user }}"
        login_host: "localhost"
        login_user: postgres
        login_password: "{{ postgres_root_password }}"
      loop: "{{ postgres_databases }}"
      no_log: true

    - name: 8. Allow PostgreSQL port through UFW firewall
      ufw:
        rule: allow
        port: "5432"
        proto: tcp

    - name: Print final status message
      debug:
        msg: "SUCCESS! PostgreSQL container is running and configured."